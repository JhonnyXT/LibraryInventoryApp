package com.example.libraryinventoryapp.services

import com.example.libraryinventoryapp.models.Book
import com.example.libraryinventoryapp.models.WishlistItem

/**
 * üîî NotificationService - Servicio de notificaciones multiplataforma
 * 
 * FUNCIONALIDADES:
 * ‚úÖ Push notifications espec√≠ficas de cada plataforma
 * ‚úÖ Canales diferenciados por tipo de notificaci√≥n
 * ‚úÖ Programaci√≥n inteligente de recordatorios
 * ‚úÖ Gesti√≥n de permisos multiplataforma
 */
interface NotificationService {
    
    /**
     * üîß Inicializar servicio de notificaciones
     */
    suspend fun initialize(): Result<Unit>
    
    /**
     * üìö Notificaci√≥n de libro disponible en wishlist
     */
    suspend fun notifyBookAvailable(
        book: Book,
        availableCount: Int,
        targetUserId: String? = null
    ): Result<Unit>
    
    /**
     * üéâ Notificaci√≥n de libro asignado (removido de wishlist)
     */
    suspend fun notifyBookAssignedFromWishlist(
        wishlistItem: WishlistItem,
        targetUserId: String
    ): Result<Unit>
    
    /**
     * ‚è∞ Notificaci√≥n de recordatorio de devoluci√≥n
     */
    suspend fun notifyBookDueReminder(
        book: Book,
        userId: String,
        daysUntilDue: Int,
        urgencyLevel: ReminderUrgency
    ): Result<Unit>
    
    /**
     * üö® Notificaci√≥n de libro vencido
     */
    suspend fun notifyBookOverdue(
        book: Book,
        userId: String,
        daysOverdue: Int,
        urgencyLevel: OverdueUrgency
    ): Result<Unit>
    
    /**
     * üéØ Programar recordatorios autom√°ticos
     */
    suspend fun scheduleBookDueReminders(
        book: Book,
        userId: String,
        loanExpirationDate: Long
    ): Result<Unit>
    
    /**
     * ‚ùå Cancelar recordatorios programados
     */
    suspend fun cancelBookReminders(bookId: String, userId: String): Result<Unit>
    
    /**
     * üîî Enviar notificaci√≥n general
     */
    suspend fun sendGeneralNotification(
        title: String,
        message: String,
        targetUserId: String? = null,
        notificationType: NotificationType = NotificationType.INFO
    ): Result<Unit>
    
    /**
     * üì± Verificar permisos de notificaci√≥n
     */
    suspend fun checkNotificationPermissions(): NotificationPermissionStatus
    
    /**
     * üîê Solicitar permisos de notificaci√≥n
     */
    suspend fun requestNotificationPermissions(): Result<Boolean>
    
    /**
     * üìä Obtener estad√≠sticas de notificaciones
     */
    suspend fun getNotificationStats(): Result<NotificationStats>
    
    /**
     * üßπ Limpiar notificaciones antigas
     */
    suspend fun clearOldNotifications(olderThanDays: Int = 30): Result<Unit>
}

/**
 * ‚ö° Niveles de urgencia para recordatorios
 */
enum class ReminderUrgency(val daysInAdvance: Int, val frequency: Int) {
    LOW(3, 1),      // 3 d√≠as antes, 1 vez al d√≠a
    MEDIUM(2, 2),   // 2 d√≠as antes, 2 veces al d√≠a
    HIGH(1, 3),     // 1 d√≠a antes, 3 veces al d√≠a
    CRITICAL(0, 6)  // D√≠a del vencimiento, 6 veces al d√≠a
}

/**
 * üö® Niveles de urgencia para libros vencidos
 */
enum class OverdueUrgency(val daysOverdue: Int, val frequency: Int) {
    RECENT(1, 2),    // 1-3 d√≠as vencido, 2 veces al d√≠a
    MEDIUM(4, 3),    // 4-7 d√≠as vencido, 3 veces al d√≠a
    HIGH(8, 4),      // 8-14 d√≠as vencido, 4 veces al d√≠a
    CRITICAL(15, 6)  // +15 d√≠as vencido, 6 veces al d√≠a
}

/**
 * üéØ Tipos de notificaci√≥n
 */
enum class NotificationType {
    INFO,       // Informaci√≥n general
    REMINDER,   // Recordatorio de devoluci√≥n
    OVERDUE,    // Libro vencido
    WISHLIST,   // Disponibilidad en wishlist
    ASSIGNMENT, // Asignaci√≥n de libro
    SYSTEM      // Notificaci√≥n del sistema
}

/**
 * üîê Estados de permisos de notificaci√≥n
 */
enum class NotificationPermissionStatus {
    GRANTED,        // Concedido
    DENIED,         // Denegado
    NOT_REQUESTED,  // No solicitado a√∫n
    RESTRICTED      // Restringido por el sistema
}

/**
 * üìä Estad√≠sticas de notificaciones
 */
data class NotificationStats(
    val totalSent: Int,
    val totalDelivered: Int,
    val totalClicked: Int,
    val pendingScheduled: Int,
    val lastNotificationSent: Long?, // timestamp
    val notificationsByType: Map<NotificationType, Int>
)

/**
 * üè≠ Factory para crear NotificationService espec√≠fico de plataforma
 */
expect class NotificationServiceFactory() {
    fun create(): NotificationService
}

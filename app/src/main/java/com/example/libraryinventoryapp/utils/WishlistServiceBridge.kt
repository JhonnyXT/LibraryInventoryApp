package com.example.libraryinventoryapp.utils

import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.os.Build
import android.util.Log
import androidx.core.app.NotificationCompat
import com.example.libraryinventoryapp.R
import com.example.libraryinventoryapp.UserActivity
import com.example.libraryinventoryapp.models.Book
import com.example.libraryinventoryapp.models.WishlistItem
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.ListenerRegistration

/**
 * üåâ WishlistServiceBridge - Puente entre UI Android y NotificationService KMP
 * 
 * PROP√ìSITO:
 * ‚úÖ Mantener interfaz exacta del WishlistAvailabilityService Android original
 * ‚úÖ Usar internamente NotificationService KMP cuando est√© disponible
 * ‚úÖ Preservar 100% compatibilidad con c√≥digo existente
 * ‚úÖ Monitoreo h√≠brido Firebase + notificaciones KMP
 */
class WishlistServiceBridge private constructor(private val context: Context) {

    companion object {
        private const val TAG = "WishlistServiceBridge"
        
        // üîî Canal de notificaciones
        private const val CHANNEL_ID_WISHLIST = "wishlist_availability"
        private const val CHANNEL_NAME = "Libros Deseados Disponibles"
        private const val CHANNEL_DESCRIPTION = "Notificaciones cuando libros de tu lista de deseos est√©n disponibles"
        
        // üéØ Request codes para notificaciones √∫nicas
        private const val NOTIFICATION_ID_BASE = 2000
        
        @Volatile
        private var INSTANCE: WishlistServiceBridge? = null
        
        fun getInstance(context: Context): WishlistServiceBridge {
            return INSTANCE ?: synchronized(this) {
                INSTANCE ?: WishlistServiceBridge(context.applicationContext).also { INSTANCE = it }
            }
        }
    }

    // üîß NotificationService KMP (pendiente de implementaci√≥n completa)
    private val notificationServiceKmp = null // Temporalmente null hasta Phase 5

    // üî• Firebase directo (para monitoreo)
    private val firestore = FirebaseFirestore.getInstance()
    private val auth = FirebaseAuth.getInstance()
    
    // üì° Listeners activos
    private var wishlistListener: ListenerRegistration? = null
    private val bookListeners = mutableMapOf<String, ListenerRegistration>()

    /**
     * üöÄ Iniciar monitoreo - COMPATIBLE con interfaz original
     */
    fun startMonitoring() {
        val currentUserId = auth.currentUser?.uid
        if (currentUserId == null) {
            Log.w(TAG, "‚ö†Ô∏è Usuario no autenticado - no se puede iniciar monitoreo")
            return
        }

        Log.i(TAG, "üåâ Bridge: Iniciando monitoreo de lista de deseos")

        // Crear canal de notificaciones
        createNotificationChannel()

        // Limpiar listeners anteriores
        stopMonitoring()

        // Inicializar NotificationService KMP si est√° disponible
        initializeKmpNotificationService()

        // Escuchar cambios en la lista de deseos del usuario
        startWishlistListener(currentUserId)
    }

    /**
     * üõë Detener monitoreo - COMPATIBLE con interfaz original
     */
    fun stopMonitoring() {
        Log.i(TAG, "üåâ Bridge: Deteniendo monitoreo de lista de deseos")
        
        wishlistListener?.remove()
        wishlistListener = null
        
        bookListeners.values.forEach { it.remove() }
        bookListeners.clear()
    }

    /**
     * üîß Inicializar NotificationService KMP
     */
    private fun initializeKmpNotificationService() {
        notificationServiceKmp?.let { service ->
            try {
                Log.d(TAG, "üöÄ Inicializando NotificationService KMP")
                // La inicializaci√≥n se har√≠a de forma as√≠ncrona
                // Por ahora solo logeamos que est√° disponible
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Error inicializando NotificationService KMP: ${e.message}")
            }
        }
    }

    /**
     * üì° Listener de lista de deseos del usuario
     */
    private fun startWishlistListener(userId: String) {
        wishlistListener = firestore.collection("wishlist")
            .whereEqualTo("userId", userId)
            .addSnapshotListener { snapshot, error ->
                if (error != null) {
                    Log.e(TAG, "‚ùå Error en listener de wishlist: ${error.message}")
                    return@addSnapshotListener
                }

                snapshot?.documents?.forEach { doc ->
                    try {
                        val wishlistItem = doc.toObject(WishlistItem::class.java)
                        wishlistItem?.let { item ->
                            if (!item.isAvailable) {
                                // Solo monitorear libros no disponibles
                                startMonitoringBook(item)
                            }
                        }
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Error procesando item de wishlist: ${e.message}")
                    }
                }
            }
    }

    /**
     * üìö Monitorear libro espec√≠fico
     */
    private fun startMonitoringBook(wishlistItem: WishlistItem) {
        Log.d(TAG, "üåâ Bridge: Monitoreando libro: ${wishlistItem.bookTitle}")
        
        // Evitar listeners duplicados
        bookListeners[wishlistItem.bookId]?.remove()
        
        val listener = firestore.collection("books")
            .document(wishlistItem.bookId)
            .addSnapshotListener { snapshot, error ->
                if (error != null) {
                    Log.e(TAG, "‚ùå Error monitoreando libro ${wishlistItem.bookTitle}: ${error.message}")
                    return@addSnapshotListener
                }

                snapshot?.let { doc ->
                    try {
                        val book = doc.toObject(Book::class.java)
                        book?.let { bookData ->
                            checkBookAvailability(bookData, wishlistItem)
                        }
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Error procesando cambios del libro: ${e.message}")
                    }
                }
            }
        
        bookListeners[wishlistItem.bookId] = listener
    }

    /**
     * üìä Verificar disponibilidad del libro
     */
    private fun checkBookAvailability(book: Book, wishlistItem: WishlistItem) {
        val assignedCount = book.assignedTo?.size ?: 0
        val availableCount = book.quantity - assignedCount
        
        Log.d(TAG, "üìä ${book.title}: ${book.quantity} total, $assignedCount asignados, $availableCount disponibles")
        
        if (availableCount > 0 && !wishlistItem.isAvailable) {
            // ¬°Libro disponible!
            Log.i(TAG, "üéâ ¬°Libro disponible en wishlist!: ${book.title}")
            
            // Enviar notificaci√≥n
            sendBookAvailableNotification(book, availableCount, wishlistItem)
            
            // Actualizar estado en wishlist
            updateWishlistItemAvailability(wishlistItem.id, true)
        } else if (availableCount <= 0 && wishlistItem.isAvailable) {
            // Libro ya no disponible
            Log.d(TAG, "üìâ Libro ya no disponible: ${book.title}")
            updateWishlistItemAvailability(wishlistItem.id, false)
        }
    }

    /**
     * üîî Enviar notificaci√≥n de libro disponible (h√≠brido KMP + Android)
     */
    private fun sendBookAvailableNotification(book: Book, availableCount: Int, wishlistItem: WishlistItem) {
        try {
            // üöÄ Intentar con NotificationService KMP primero
            notificationServiceKmp?.let { service ->
                Log.d(TAG, "üîî Usando NotificationService KMP para notificaci√≥n")
                // La notificaci√≥n KMP se enviar√≠a de forma as√≠ncrona
                // Por ahora usamos fallback a Android directo
            }
            
            // üì± Fallback a notificaci√≥n Android directa
            sendAndroidNotification(book, availableCount, wishlistItem)
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error enviando notificaci√≥n: ${e.message}")
        }
    }

    /**
     * üì± Notificaci√≥n Android directa (fallback)
     */
    private fun sendAndroidNotification(book: Book, availableCount: Int, wishlistItem: WishlistItem) {
        try {
            val title = "üìö ¬°Libro Disponible!"
            val message = "\"${book.title}\" ya est√° disponible ($availableCount ejemplares)"
            
            // Intent para abrir la app
            val intent = Intent(context, UserActivity::class.java).apply {
                flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP
                putExtra("open_wishlist", true)
                putExtra("book_id", book.id)
            }
            
            val pendingIntent = PendingIntent.getActivity(
                context,
                NOTIFICATION_ID_BASE + book.id.hashCode(),
                intent,
                PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
            )
            
            // Crear notificaci√≥n
            val notification = NotificationCompat.Builder(context, CHANNEL_ID_WISHLIST)
                .setSmallIcon(R.drawable.ic_book_library)
                .setContentTitle(title)
                .setContentText(message)
                .setStyle(NotificationCompat.BigTextStyle().bigText(message))
                .setPriority(NotificationCompat.PRIORITY_HIGH)
                .setCategory(NotificationCompat.CATEGORY_STATUS)
                .setAutoCancel(true)
                .setContentIntent(pendingIntent)
                .setColor(context.getColor(R.color.colorPrimary))
                .build()
            
            // Enviar notificaci√≥n
            val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            notificationManager.notify(NOTIFICATION_ID_BASE + book.id.hashCode(), notification)
            
            Log.i(TAG, "‚úÖ Notificaci√≥n Android enviada: ${book.title}")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error enviando notificaci√≥n Android: ${e.message}")
        }
    }

    /**
     * üìù Actualizar estado de disponibilidad en wishlist
     */
    private fun updateWishlistItemAvailability(wishlistItemId: String, isAvailable: Boolean) {
        firestore.collection("wishlist")
            .document(wishlistItemId)
            .update("isAvailable", isAvailable)
            .addOnSuccessListener {
                Log.d(TAG, "‚úÖ Estado de wishlist actualizado: $wishlistItemId -> $isAvailable")
            }
            .addOnFailureListener { e ->
                Log.e(TAG, "‚ùå Error actualizando wishlist: ${e.message}")
            }
    }

    /**
     * üîî Crear canal de notificaciones
     */
    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                CHANNEL_ID_WISHLIST,
                CHANNEL_NAME,
                NotificationManager.IMPORTANCE_HIGH
            ).apply {
                description = CHANNEL_DESCRIPTION
                enableLights(true)
                enableVibration(true)
                setShowBadge(true)
            }
            
            val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            notificationManager.createNotificationChannel(channel)
            
            Log.d(TAG, "‚úÖ Canal de notificaciones creado: $CHANNEL_ID_WISHLIST")
        }
    }

    /**
     * üóëÔ∏è Remover libro de wishlist al ser asignado - COMPATIBLE con interfaz original
     */
    fun removeFromWishlistOnAssignment(bookId: String, userId: String) {
        try {
            Log.i(TAG, "üåâ Bridge: Removiendo libro de wishlist por asignaci√≥n")
            
            firestore.collection("wishlist")
                .whereEqualTo("bookId", bookId)
                .whereEqualTo("userId", userId)
                .get()
                .addOnSuccessListener { documents ->
                    documents.forEach { doc ->
                        doc.reference.delete()
                            .addOnSuccessListener {
                                Log.i(TAG, "‚úÖ Libro removido de wishlist por asignaci√≥n: $bookId")
                                
                                // Enviar notificaci√≥n de asignaci√≥n con KMP si est√° disponible
                                sendBookAssignedNotification(doc.toObject(WishlistItem::class.java))
                            }
                            .addOnFailureListener { e ->
                                Log.e(TAG, "‚ùå Error removiendo de wishlist: ${e.message}")
                            }
                    }
                }
                .addOnFailureListener { e ->
                    Log.e(TAG, "‚ùå Error buscando en wishlist: ${e.message}")
                }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error en removeFromWishlistOnAssignment: ${e.message}")
        }
    }

    /**
     * üéâ Notificaci√≥n de libro asignado (removido de wishlist)
     */
    private fun sendBookAssignedNotification(wishlistItem: WishlistItem) {
        try {
            // üöÄ Intentar con NotificationService KMP primero
            notificationServiceKmp?.let { service ->
                Log.d(TAG, "üéâ Usando NotificationService KMP para notificaci√≥n de asignaci√≥n")
                // Se manejar√≠a de forma as√≠ncrona
            }
            
            // üì± Fallback a notificaci√≥n Android directa
            val title = "üéâ ¬°Libro Asignado!"
            val message = "\"${wishlistItem.bookTitle}\" ha sido asignado. Ya no est√° en tu lista de deseos."
            
            val intent = Intent(context, UserActivity::class.java).apply {
                flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP
                putExtra("open_assigned_books", true)
            }
            
            val pendingIntent = PendingIntent.getActivity(
                context,
                NOTIFICATION_ID_BASE + wishlistItem.bookId.hashCode() + 1000,
                intent,
                PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
            )
            
            val notification = NotificationCompat.Builder(context, CHANNEL_ID_WISHLIST)
                .setSmallIcon(R.drawable.ic_book_library)
                .setContentTitle(title)
                .setContentText(message)
                .setStyle(NotificationCompat.BigTextStyle().bigText(message))
                .setPriority(NotificationCompat.PRIORITY_DEFAULT)
                .setCategory(NotificationCompat.CATEGORY_STATUS)
                .setAutoCancel(true)
                .setContentIntent(pendingIntent)
                .setColor(context.getColor(R.color.success_green))
                .build()
            
            val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            notificationManager.notify(NOTIFICATION_ID_BASE + wishlistItem.bookId.hashCode() + 1000, notification)
            
            Log.i(TAG, "‚úÖ Notificaci√≥n de asignaci√≥n enviada: ${wishlistItem.bookTitle}")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error enviando notificaci√≥n de asignaci√≥n: ${e.message}")
        }
    }
}

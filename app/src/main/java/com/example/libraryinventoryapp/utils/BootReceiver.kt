package com.example.libraryinventoryapp.utils

import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.util.Log
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.Timestamp
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

/**
 * üîÑ BootReceiver - Receptor de Reinicio del Sistema
 * 
 * FUNCIONALIDADES:
 * ‚úÖ Reprogramar notificaciones despu√©s de reinicio del dispositivo
 * ‚úÖ Reprogramar notificaciones despu√©s de actualizaci√≥n de la app
 * ‚úÖ Recuperar datos de pr√©stamos activos desde Firebase
 * ‚úÖ Integraci√≥n con sistema h√≠brido de escalamiento
 */
class BootReceiver : BroadcastReceiver() {

    companion object {
        private const val TAG = "BootReceiver"
    }

    override fun onReceive(context: Context?, intent: Intent?) {
        if (context == null || intent == null) {
            Log.e(TAG, "‚ùå Context o Intent nulos en BootReceiver")
            return
        }

        val action = intent.action
        Log.d(TAG, "üîÑ === BOOT RECEIVER ACTIVADO ===")
        Log.d(TAG, "üéØ Acci√≥n recibida: $action")

        when (action) {
            Intent.ACTION_BOOT_COMPLETED -> {
                Log.d(TAG, "üì± Dispositivo reiniciado - Reprogramando notificaciones")
                rescheduleAllNotifications(context)
            }
            
            Intent.ACTION_MY_PACKAGE_REPLACED,
            Intent.ACTION_PACKAGE_REPLACED -> {
                Log.d(TAG, "üì¶ App actualizada - Reprogramando notificaciones")
                rescheduleAllNotifications(context)
            }
            
            else -> {
                Log.d(TAG, "‚ùì Acci√≥n no reconocida: $action")
            }
        }
    }

    /**
     * üîÑ Reprogramar todas las notificaciones activas
     */
    private fun rescheduleAllNotifications(context: Context) {
        Log.d(TAG, "üîÑ Iniciando reprogramaci√≥n de notificaciones...")

        // üåê Usar corrutina para operaciones as√≠ncronas con Firebase
        CoroutineScope(Dispatchers.IO).launch {
            try {
                val firestore = FirebaseFirestore.getInstance()
                val notificationManager = LibraryNotificationManager(context)
                
                Log.d(TAG, "üìö Consultando libros con pr√©stamos activos...")

                // üìã Consultar todos los libros con asignaciones activas
                firestore.collection("books")
                    .whereNotEqualTo("assignedTo", null)
                    .get()
                    .addOnSuccessListener { documents ->
                        Log.d(TAG, "‚úÖ Encontrados ${documents.size()} libros con asignaciones")
                        
                        var totalNotificationsScheduled = 0

                        for (document in documents) {
                            try {
                                val bookId = document.id
                                val bookTitle = document.getString("title") ?: "Libro sin t√≠tulo"
                                val bookAuthor = document.getString("author") ?: "Autor desconocido"
                                
                                val assignedTo = document.get("assignedTo") as? List<String> ?: emptyList()
                                val assignedWithNames = document.get("assignedWithNames") as? List<String> ?: emptyList()
                                val loanExpirationDates = document.get("loanExpirationDates") as? List<Timestamp> ?: emptyList()

                                Log.d(TAG, "üìñ Procesando libro: $bookTitle")
                                Log.d(TAG, "üë• Usuarios asignados: ${assignedTo.size}")

                                // üîÑ Reprogramar notificaciones para cada usuario asignado
                                assignedTo.forEachIndexed { index, userId ->
                                    try {
                                        val userName = if (index < assignedWithNames.size) {
                                            assignedWithNames[index]
                                        } else {
                                            "Usuario desconocido"
                                        }
                                        
                                        val expirationDate = if (index < loanExpirationDates.size) {
                                            loanExpirationDates[index]
                                        } else {
                                            // üìÖ Fecha por defecto si no hay fecha de vencimiento
                                            Timestamp(System.currentTimeMillis() / 1000 + (15 * 24 * 60 * 60), 0)
                                        }

                                        Log.d(TAG, "üîî Reprogramando para: $userName")
                                        
                                        // üîî Programar notificaciones con sistema h√≠brido
                                        notificationManager.scheduleBookLoanNotifications(
                                            bookId = bookId,
                                            bookTitle = bookTitle,
                                            bookAuthor = bookAuthor,
                                            userId = userId,
                                            userName = userName,
                                            expirationDate = expirationDate
                                        )
                                        
                                        totalNotificationsScheduled++

                                    } catch (e: Exception) {
                                        Log.e(TAG, "‚ùå Error reprogramando notificaci√≥n para usuario $index: ${e.message}")
                                    }
                                }

                            } catch (e: Exception) {
                                Log.e(TAG, "‚ùå Error procesando libro ${document.id}: ${e.message}")
                            }
                        }

                        Log.d(TAG, "‚úÖ Reprogramaci√≥n completada: $totalNotificationsScheduled notificaciones programadas")
                        
                    }
                    .addOnFailureListener { exception ->
                        Log.e(TAG, "‚ùå Error consultando Firebase: ${exception.message}")
                    }

            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Error general en reprogramaci√≥n: ${e.message}")
            }
        }
    }
}
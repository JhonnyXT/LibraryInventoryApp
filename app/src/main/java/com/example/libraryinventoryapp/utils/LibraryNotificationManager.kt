package com.example.libraryinventoryapp.utils

import android.app.AlarmManager
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.os.Build
import android.util.Log
import androidx.annotation.RequiresApi
import com.google.firebase.Timestamp
import java.util.*
import java.util.concurrent.TimeUnit

/**
 * üîî LibraryNotificationManager - Sistema H√≠brido de Notificaciones
 * 
 * FUNCIONALIDADES:
 * ‚úÖ Notificaciones inmediatas al cambiar fechas
 * ‚úÖ Horarios escalados por urgencia del pr√©stamo
 * ‚úÖ Escalamiento inteligente para libros vencidos
 * ‚úÖ Cancelaci√≥n espec√≠fica por libro/usuario
 * ‚úÖ Reprogramaci√≥n autom√°tica despu√©s de reinicio
 */
class LibraryNotificationManager(private val context: Context) {

    companion object {
        private const val TAG = "LibraryNotificationManager"
        
        // üìã IDs de Canales de Notificaci√≥n
        const val CHANNEL_ID_UPCOMING = "book_loans_upcoming"
        const val CHANNEL_ID_OVERDUE = "book_loans_overdue"
        const val CHANNEL_ID_CRITICAL = "book_loans_critical"
        
        // üéØ Request Codes para identificar notificaciones √∫nicas
        private const val REQUEST_CODE_BASE = 1000
        private const val REQUEST_CODE_UPCOMING_3DAY = 1
        private const val REQUEST_CODE_UPCOMING_1DAY = 2
        private const val REQUEST_CODE_DUE_TODAY_AM = 3
        private const val REQUEST_CODE_DUE_TODAY_PM = 4
        private const val REQUEST_CODE_OVERDUE_1DAY_AM = 5
        private const val REQUEST_CODE_OVERDUE_1DAY_PM = 6
        private const val REQUEST_CODE_OVERDUE_FREQUENT = 7
        private const val REQUEST_CODE_OVERDUE_CRITICAL = 8
        
        // ‚è∞ Horarios optimizados para notificaciones
        private const val HOUR_MORNING_REMINDER = 10      // 10:00 AM
        private const val HOUR_AFTERNOON_REMINDER = 18    // 6:00 PM
        private const val HOUR_DUE_MORNING = 9           // 9:00 AM 
        private const val HOUR_DUE_AFTERNOON = 18        // 6:00 PM
        private const val HOUR_OVERDUE_MORNING = 10      // 10:00 AM
        private const val HOUR_OVERDUE_AFTERNOON = 16    // 4:00 PM
    }

    private val alarmManager = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager
    private val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager

    init {
        createNotificationChannels()
    }

    /**
     * üì∫ Crear canales de notificaci√≥n
     */
    private fun createNotificationChannels() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            
            // üìÖ Canal para pr√≥ximos vencimientos
            val upcomingChannel = NotificationChannel(
                CHANNEL_ID_UPCOMING,
                "Pr√≥ximos Vencimientos",
                NotificationManager.IMPORTANCE_DEFAULT
            ).apply {
                description = "Recordatorios de libros pr√≥ximos a vencer"
                enableVibration(true)
                setShowBadge(true)
            }

            // ‚ö†Ô∏è Canal para libros vencidos
            val overdueChannel = NotificationChannel(
                CHANNEL_ID_OVERDUE,
                "Libros Vencidos",
                NotificationManager.IMPORTANCE_HIGH
            ).apply {
                description = "Notificaciones de libros vencidos"
                enableVibration(true)
                setShowBadge(true)
            }

            // üö® Canal para casos cr√≠ticos
            val criticalChannel = NotificationChannel(
                CHANNEL_ID_CRITICAL,
                "Cr√≠tico - Devoluci√≥n Urgente",
                NotificationManager.IMPORTANCE_HIGH
            ).apply {
                description = "Libros cr√≠ticos - m√°s de 7 d√≠as vencidos"
                enableVibration(true)
                setShowBadge(true)
            }

            notificationManager.createNotificationChannels(
                listOf(upcomingChannel, overdueChannel, criticalChannel)
            )
            
            Log.d(TAG, "üîî Canales de notificaci√≥n creados exitosamente")
        }
    }

    /**
     * üéØ SISTEMA H√çBRIDO: Programar notificaciones con escalamiento inteligente
     */
    fun scheduleBookLoanNotifications(
        bookId: String,
        bookTitle: String,
        bookAuthor: String,
        userId: String,
        userName: String,
        expirationDate: Timestamp
    ) {
        Log.d(TAG, "üîî === INICIANDO SISTEMA H√çBRIDO DE NOTIFICACIONES ===")
        Log.d(TAG, "üìö Libro: $bookTitle | üë§ Usuario: $userName")
        Log.d(TAG, "üìÖ Vencimiento: ${Date(expirationDate.seconds * 1000)}")

        val currentTime = System.currentTimeMillis()
        val expirationTime = expirationDate.seconds * 1000
        val daysUntilDue = TimeUnit.MILLISECONDS.toDays(expirationTime - currentTime).toInt()

        Log.d(TAG, "‚è∞ D√≠as hasta vencimiento: $daysUntilDue")

        // üéØ Escalamiento inteligente por urgencia
        when {
            daysUntilDue in 3..5 -> {
                Log.d(TAG, "üìÖ CATEGOR√çA: Pr√≥ximo (3-5 d√≠as) - 1 vez al d√≠a")
                scheduleUpcomingReminder(bookId, userId, bookTitle, bookAuthor, userName, expirationTime, 3)
            }
            
            daysUntilDue in 1..2 -> {
                Log.d(TAG, "‚ö†Ô∏è CATEGOR√çA: Muy pr√≥ximo (1-2 d√≠as) - 1 vez al d√≠a")
                scheduleUpcoming1DayReminder(bookId, userId, bookTitle, bookAuthor, userName, expirationTime)
            }
            
            daysUntilDue == 0 -> {
                Log.d(TAG, "üö® CATEGOR√çA: Vence HOY - 2 veces (ma√±ana y tarde)")
                scheduleDueTodayReminders(bookId, userId, bookTitle, bookAuthor, userName, expirationTime)
            }
            
            daysUntilDue in -3..-1 -> {
                Log.d(TAG, "üî¥ CATEGOR√çA: Vencido reciente (1-3 d√≠as) - 2 veces al d√≠a")
                scheduleOverdueRecentReminders(bookId, userId, bookTitle, bookAuthor, userName, expirationTime, Math.abs(daysUntilDue))
            }
            
            daysUntilDue in -7..-4 -> {
                Log.d(TAG, "üî• CATEGOR√çA: Vencido medio (4-7 d√≠as) - Cada 8 horas")
                scheduleOverdueFrequentReminders(bookId, userId, bookTitle, bookAuthor, userName, expirationTime, Math.abs(daysUntilDue))
            }
            
            daysUntilDue < -7 -> {
                Log.d(TAG, "üö® CATEGOR√çA: CR√çTICO (+7 d√≠as vencido) - Cada 4 horas")
                scheduleOverdueCriticalReminders(bookId, userId, bookTitle, bookAuthor, userName, expirationTime, Math.abs(daysUntilDue))
            }
            
            else -> {
                Log.d(TAG, "üìù Libro muy lejano al vencimiento ($daysUntilDue d√≠as) - Sin notificaciones por ahora")
            }
        }

        // ‚ö° NOTIFICACI√ìN INMEDIATA si est√° pr√≥ximo a vencer
        if (daysUntilDue <= 2) {
            scheduleImmediateNotification(bookId, userId, bookTitle, userName, daysUntilDue)
        }

        Log.d(TAG, "‚úÖ Sistema h√≠brido configurado exitosamente para: $bookTitle")
    }

    /**
     * üìÖ Recordatorio para libros pr√≥ximos (3-5 d√≠as)
     */
    private fun scheduleUpcomingReminder(
        bookId: String, userId: String, bookTitle: String, bookAuthor: String, userName: String,
        expirationTime: Long, daysRemaining: Int
    ) {
        val reminderTime = calculateTimeAtHour(
            expirationTime - TimeUnit.DAYS.toMillis(daysRemaining.toLong()),
            HOUR_MORNING_REMINDER, 0
        )

        scheduleNotification(
            bookId, userId, REQUEST_CODE_UPCOMING_3DAY,
            reminderTime,
            "üìÖ Recordatorio de Biblioteca",
            "üìö \"$bookTitle\" vence en $daysRemaining d√≠as. ¬°No olvides devolverlo!",
            CHANNEL_ID_UPCOMING,
            bookTitle, bookAuthor, userName, daysRemaining
        )
        
        Log.d(TAG, "üìÖ Programado recordatorio 3-5 d√≠as: ${Date(reminderTime)}")
    }

    /**
     * ‚ö†Ô∏è Recordatorio para libros muy pr√≥ximos (1-2 d√≠as)
     */
    private fun scheduleUpcoming1DayReminder(
        bookId: String, userId: String, bookTitle: String, bookAuthor: String, userName: String,
        expirationTime: Long
    ) {
        val reminderTime = calculateTimeAtHour(
            expirationTime - TimeUnit.DAYS.toMillis(1),
            HOUR_AFTERNOON_REMINDER, 0
        )

        scheduleNotification(
            bookId, userId, REQUEST_CODE_UPCOMING_1DAY,
            reminderTime,
            "‚ö†Ô∏è Biblioteca - ¬°Pr√≥ximo Vencimiento!",
            "üìö \"$bookTitle\" vence MA√ëANA. ¬°Prep√°rate para devolverlo!",
            CHANNEL_ID_UPCOMING,
            bookTitle, bookAuthor, userName, 1
        )
        
        Log.d(TAG, "‚ö†Ô∏è Programado recordatorio 1-2 d√≠as: ${Date(reminderTime)}")
    }

    /**
     * üö® Recordatorios para d√≠a de vencimiento (2 veces)
     */
    private fun scheduleDueTodayReminders(
        bookId: String, userId: String, bookTitle: String, bookAuthor: String, userName: String,
        expirationTime: Long
    ) {
        // üåÖ Recordatorio matutino
        val morningTime = calculateTimeAtHour(expirationTime, HOUR_DUE_MORNING, 0)
        scheduleNotification(
            bookId, userId, REQUEST_CODE_DUE_TODAY_AM,
            morningTime,
            "üö® ¬°VENCE HOY! - Biblioteca",
            "üìö \"$bookTitle\" vence HOY. ¬°Devu√©lvelo antes del cierre!",
            CHANNEL_ID_OVERDUE,
            bookTitle, bookAuthor, userName, 0
        )

        // üåÜ Recordatorio vespertino
        val afternoonTime = calculateTimeAtHour(expirationTime, HOUR_DUE_AFTERNOON, 0)
        scheduleNotification(
            bookId, userId, REQUEST_CODE_DUE_TODAY_PM,
            afternoonTime,
            "üö® ¬°√öLTIMO RECORDATORIO! - Biblioteca",
            "üìö \"$bookTitle\" vence HOY. ¬°A√∫n puedes devolverlo!",
            CHANNEL_ID_OVERDUE,
            bookTitle, bookAuthor, userName, 0
        )
        
        Log.d(TAG, "üö® Programados 2 recordatorios para d√≠a de vencimiento")
    }

    /**
     * üî¥ Recordatorios para vencidos recientes (1-3 d√≠as) - 2 veces al d√≠a
     */
    private fun scheduleOverdueRecentReminders(
        bookId: String, userId: String, bookTitle: String, bookAuthor: String, userName: String,
        expirationTime: Long, daysOverdue: Int
    ) {
        val baseTime = System.currentTimeMillis()

        // üåÖ Recordatorio matutino
        val morningTime = calculateTimeAtHour(baseTime, HOUR_OVERDUE_MORNING, 0)
        scheduleNotification(
            bookId, userId, REQUEST_CODE_OVERDUE_1DAY_AM,
            morningTime,
            "üî¥ Libro VENCIDO - Biblioteca",
            "üìö \"$bookTitle\" lleva $daysOverdue d√≠a(s) vencido. ¬°Devu√©lvelo pronto!",
            CHANNEL_ID_OVERDUE,
            bookTitle, bookAuthor, userName, -daysOverdue
        )

        // üåÜ Recordatorio vespertino
        val afternoonTime = calculateTimeAtHour(baseTime, HOUR_OVERDUE_AFTERNOON, 0)
        scheduleNotification(
            bookId, userId, REQUEST_CODE_OVERDUE_1DAY_PM,
            afternoonTime,
            "üî¥ Recordatorio VENCIDO - Biblioteca",
            "üìö \"$bookTitle\" est√° vencido hace $daysOverdue d√≠a(s). ¬°Devu√©lvelo!",
            CHANNEL_ID_OVERDUE,
            bookTitle, bookAuthor, userName, -daysOverdue
        )
        
        Log.d(TAG, "üî¥ Programados 2 recordatorios diarios para vencido reciente ($daysOverdue d√≠as)")
    }

    /**
     * üî• Recordatorios frecuentes para vencidos medios (4-7 d√≠as) - Cada 8 horas
     */
    private fun scheduleOverdueFrequentReminders(
        bookId: String, userId: String, bookTitle: String, bookAuthor: String, userName: String,
        expirationTime: Long, daysOverdue: Int
    ) {
        val baseTime = System.currentTimeMillis()
        val intervalMillis = TimeUnit.HOURS.toMillis(8) // Cada 8 horas

        // üîÑ Programar notificaciones cada 8 horas
        for (i in 0 until 3) { // 3 veces al d√≠a (cada 8 horas)
            val notificationTime = baseTime + (intervalMillis * i)
            
            scheduleNotification(
                bookId, userId, REQUEST_CODE_OVERDUE_FREQUENT + i,
                notificationTime,
                "üî• URGENTE - Libro Vencido",
                "üìö \"$bookTitle\" lleva $daysOverdue d√≠as vencido. ¬°DEVU√âLVELO YA!",
                CHANNEL_ID_OVERDUE,
                bookTitle, bookAuthor, userName, -daysOverdue
            )
        }
        
        Log.d(TAG, "üî• Programadas 3 notificaciones cada 8 horas para vencido medio ($daysOverdue d√≠as)")
    }

    /**
     * üö® Recordatorios cr√≠ticos para muy vencidos (+7 d√≠as) - Cada 4 horas
     */
    private fun scheduleOverdueCriticalReminders(
        bookId: String, userId: String, bookTitle: String, bookAuthor: String, userName: String,
        expirationTime: Long, daysOverdue: Int
    ) {
        val baseTime = System.currentTimeMillis()
        val intervalMillis = TimeUnit.HOURS.toMillis(4) // Cada 4 horas

        // üö® Programar notificaciones cada 4 horas
        for (i in 0 until 6) { // 6 veces al d√≠a (cada 4 horas)
            val notificationTime = baseTime + (intervalMillis * i)
            
            scheduleNotification(
                bookId, userId, REQUEST_CODE_OVERDUE_CRITICAL + i,
                notificationTime,
                "üö® CR√çTICO - Devoluci√≥n URGENTE",
                "üìö \"$bookTitle\" est√° CR√çTICO: $daysOverdue d√≠as vencido. ¬°ACCI√ìN INMEDIATA!",
                CHANNEL_ID_CRITICAL,
                bookTitle, bookAuthor, userName, -daysOverdue
            )
        }
        
        Log.d(TAG, "üö® Programadas 6 notificaciones cada 4 horas para cr√≠tico ($daysOverdue d√≠as)")
    }

    /**
     * ‚ö° Notificaci√≥n inmediata para cambios de fecha pr√≥ximos a vencer
     */
    fun scheduleImmediateNotification(
        bookId: String, userId: String, bookTitle: String, userName: String,
        daysUntilDue: Int
    ) {
        val message = when {
            daysUntilDue == 0 -> "üìö \"$bookTitle\" VENCE HOY. ¬°Devu√©lvelo!"
            daysUntilDue == 1 -> "üìö \"$bookTitle\" vence MA√ëANA. ¬°Prep√°rate!"
            daysUntilDue == 2 -> "üìö \"$bookTitle\" vence en 2 d√≠as. ¬°No olvides!"
            daysUntilDue < 0 -> "üìö \"$bookTitle\" est√° VENCIDO hace ${Math.abs(daysUntilDue)} d√≠a(s). ¬°Devu√©lvelo YA!"
            else -> "üìö \"$bookTitle\" vence pronto. ¬°Ten en cuenta!"
        }

        val channelId = if (daysUntilDue < 0) CHANNEL_ID_OVERDUE else CHANNEL_ID_UPCOMING
        val title = if (daysUntilDue < 0) "üö® Libro VENCIDO" else "‚ö†Ô∏è Fecha Actualizada"

        // ‚ö° Programar para 1 segundo despu√©s (inmediata)
        scheduleNotification(
            bookId, userId, 9999, // ID especial para inmediatas
            System.currentTimeMillis() + 1000,
            title,
            message,
            channelId,
            bookTitle, "", userName, daysUntilDue
        )

        Log.d(TAG, "‚ö° Notificaci√≥n inmediata programada: $message")
    }

    /**
     * üìö Notificaci√≥n inmediata al asignar libro
     */
    fun scheduleBookAssignmentNotification(
        bookId: String,
        bookTitle: String,
        bookAuthor: String,
        userId: String,
        userName: String,
        expirationDate: Timestamp
    ) {
        val dateFormat = java.text.SimpleDateFormat("dd/MM/yyyy", java.util.Locale.getDefault())
        val expirationDateStr = dateFormat.format(Date(expirationDate.seconds * 1000))
        
        val message = "üìö \"$bookTitle\" asignado a $userName hasta $expirationDateStr"
        val title = "‚úÖ Libro Asignado"
        
        // ‚ö° Programar para 1 segundo despu√©s (inmediata)
        scheduleNotification(
            bookId, userId, 8888, // ID especial para asignaciones
            System.currentTimeMillis() + 1000,
            title,
            message,
            CHANNEL_ID_UPCOMING,
            bookTitle, bookAuthor, userName, 999 // 999 = c√≥digo especial para asignaci√≥n
        )
        
        Log.d(TAG, "üìö Notificaci√≥n de asignaci√≥n programada: $message")
    }

    /**
     * üóëÔ∏è Cancelar todas las notificaciones de un libro espec√≠fico para un usuario
     */
    fun cancelBookNotifications(bookId: String, userId: String) {
        Log.d(TAG, "üóëÔ∏è Cancelando notificaciones para libro: $bookId, usuario: $userId")

        val requestCodes = listOf(
            REQUEST_CODE_UPCOMING_3DAY,
            REQUEST_CODE_UPCOMING_1DAY,
            REQUEST_CODE_DUE_TODAY_AM,
            REQUEST_CODE_DUE_TODAY_PM,
            REQUEST_CODE_OVERDUE_1DAY_AM,
            REQUEST_CODE_OVERDUE_1DAY_PM,
            REQUEST_CODE_OVERDUE_FREQUENT,
            REQUEST_CODE_OVERDUE_FREQUENT + 1,
            REQUEST_CODE_OVERDUE_FREQUENT + 2,
            REQUEST_CODE_OVERDUE_CRITICAL,
            REQUEST_CODE_OVERDUE_CRITICAL + 1,
            REQUEST_CODE_OVERDUE_CRITICAL + 2,
            REQUEST_CODE_OVERDUE_CRITICAL + 3,
            REQUEST_CODE_OVERDUE_CRITICAL + 4,
            REQUEST_CODE_OVERDUE_CRITICAL + 5,
            9999 // Inmediatas
        )

        requestCodes.forEach { requestCode ->
            val uniqueRequestCode = generateUniqueRequestCode(bookId, userId, requestCode)
            val intent = Intent(context, NotificationReceiver::class.java)
            val pendingIntent = PendingIntent.getBroadcast(
                context,
                uniqueRequestCode,
                intent,
                PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
            )
            
            alarmManager.cancel(pendingIntent)
        }

        Log.d(TAG, "‚úÖ Notificaciones canceladas exitosamente")
    }

    /**
     * üîî Programar una notificaci√≥n espec√≠fica
     */
    private fun scheduleNotification(
        bookId: String,
        userId: String,
        requestCode: Int,
        triggerTime: Long,
        title: String,
        message: String,
        channelId: String,
        bookTitle: String = "",
        bookAuthor: String = "",
        userName: String = "",
        daysUntilDue: Int = 0
    ) {
        if (triggerTime <= System.currentTimeMillis()) {
            Log.d(TAG, "‚è∞ Notificaci√≥n programada para el pasado, omitiendo: $title")
            return
        }

        val intent = Intent(context, NotificationReceiver::class.java).apply {
            putExtra("bookId", bookId)
            putExtra("bookTitle", bookTitle)
            putExtra("bookAuthor", bookAuthor)
            putExtra("userId", userId)
            putExtra("userName", userName)
            putExtra("title", title)
            putExtra("message", message)
            putExtra("channelId", channelId)
            putExtra("daysUntilDue", daysUntilDue)
        }

        val uniqueRequestCode = generateUniqueRequestCode(bookId, userId, requestCode)
        val pendingIntent = PendingIntent.getBroadcast(
            context,
            uniqueRequestCode,
            intent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        try {
            // üîí Verificar permisos y usar el m√©todo apropiado
            if (canScheduleExactAlarms()) {
                alarmManager.setExactAndAllowWhileIdle(
                    AlarmManager.RTC_WAKEUP,
                    triggerTime,
                    pendingIntent
                )
                Log.d(TAG, "‚è∞ Notificaci√≥n EXACTA programada: $title -> ${Date(triggerTime)}")
            } else {
                // üìÖ Fallback: usar alarma aproximada si no tenemos permisos exactos
                alarmManager.setAndAllowWhileIdle(
                    AlarmManager.RTC_WAKEUP,
                    triggerTime,
                    pendingIntent
                )
                Log.d(TAG, "‚è∞ Notificaci√≥n APROXIMADA programada: $title -> ${Date(triggerTime)}")
                Log.w(TAG, "‚ö†Ô∏è Sin permisos para alarmas exactas - usando aproximadas")
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error programando notificaci√≥n: ${e.message}")
            // üîÑ √öltimo intento con alarma b√°sica
            try {
                alarmManager.set(AlarmManager.RTC_WAKEUP, triggerTime, pendingIntent)
                Log.d(TAG, "‚è∞ Notificaci√≥n B√ÅSICA programada como fallback")
            } catch (e2: Exception) {
                Log.e(TAG, "‚ùå Error cr√≠tico programando notificaci√≥n: ${e2.message}")
            }
        }
    }

    /**
     * üéØ Generar c√≥digo √∫nico para cada notificaci√≥n
     */
    private fun generateUniqueRequestCode(bookId: String, userId: String, baseCode: Int): Int {
        return (bookId.hashCode() + userId.hashCode() + baseCode + REQUEST_CODE_BASE)
    }

    /**
     * üîí Verificar si podemos programar alarmas exactas
     */
    private fun canScheduleExactAlarms(): Boolean {
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            // Android 12+ (API 31+) requiere verificaci√≥n especial
            alarmManager.canScheduleExactAlarms()
        } else {
            // Android 11 y anteriores no requieren permisos especiales
            true
        }
    }

    /**
     * üîî Verificar permisos de notificaci√≥n
     */
    fun hasNotificationPermissions(): Boolean {
        val hasPostNotifications = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            context.checkSelfPermission(android.Manifest.permission.POST_NOTIFICATIONS) == 
                android.content.pm.PackageManager.PERMISSION_GRANTED
        } else {
            true
        }
        
        val canScheduleAlarms = canScheduleExactAlarms()
        
        Log.d(TAG, "üì± Permisos - Post Notifications: $hasPostNotifications, Schedule Alarms: $canScheduleAlarms")
        
        return hasPostNotifications && canScheduleAlarms
    }

    /**
     * üéØ Solicitar permisos de alarmas exactas (si es necesario)
     */
    fun requestExactAlarmPermission(): Boolean {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S && !alarmManager.canScheduleExactAlarms()) {
            Log.w(TAG, "‚ö†Ô∏è Sin permisos de alarmas exactas - Se usar√°n alarmas aproximadas")
            return false
        }
        return true
    }

    /**
     * ‚è∞ Calcular hora espec√≠fica en un d√≠a
     */
    private fun calculateTimeAtHour(baseTime: Long, hour: Int, minute: Int): Long {
        val calendar = Calendar.getInstance().apply {
            timeInMillis = baseTime
            set(Calendar.HOUR_OF_DAY, hour)
            set(Calendar.MINUTE, minute)
            set(Calendar.SECOND, 0)
            set(Calendar.MILLISECOND, 0)
        }
        return calendar.timeInMillis
    }
}

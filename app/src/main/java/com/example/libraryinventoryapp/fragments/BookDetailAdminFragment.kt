package com.example.libraryinventoryapp.fragments

import android.animation.Animator
import android.animation.AnimatorListenerAdapter
import android.animation.ObjectAnimator
import android.app.AlertDialog
import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ImageView
import android.widget.LinearLayout
import android.widget.TextView
import android.widget.Toast
import androidx.fragment.app.Fragment
import com.bumptech.glide.Glide
import com.example.libraryinventoryapp.R
import com.example.libraryinventoryapp.models.Book
import com.google.android.material.appbar.MaterialToolbar
import com.google.android.material.card.MaterialCardView
import com.google.android.material.chip.Chip
import com.google.android.material.chip.ChipGroup
import com.google.android.material.dialog.MaterialAlertDialogBuilder
import com.google.android.material.floatingactionbutton.FloatingActionButton
import com.google.firebase.firestore.FirebaseFirestore

/**
 * üìñ BookDetailAdminFragment - Detalle de libro para administradores
 * 
 * Caracter√≠sticas:
 * - Vista detallada del libro con imagen grande
 * - FAB con men√∫ de opciones (editar/eliminar)
 * - Material Design 3 completo
 * - Navegaci√≥n a edici√≥n y confirmaci√≥n de eliminaci√≥n
 */
class BookDetailAdminFragment : Fragment() {

    companion object {
        private const val TAG = "BookDetailAdminFragment"
        private const val ARG_BOOK_ID = "book_id"
        
        fun newInstance(bookId: String): BookDetailAdminFragment {
            val fragment = BookDetailAdminFragment()
            val args = Bundle()
            args.putString(ARG_BOOK_ID, bookId)
            fragment.arguments = args
            return fragment
        }
    }

    // üî• Componentes UI
    private lateinit var toolbar: MaterialToolbar
    private lateinit var imgBookCover: ImageView
    private lateinit var textBookTitle: TextView
    private lateinit var textBookAuthor: TextView
    private lateinit var textBookStatus: TextView
    private lateinit var textBookQuantity: TextView
    private lateinit var textBookDescription: TextView
    private lateinit var textBookIsbn: TextView
    private lateinit var chipGroupCategories: ChipGroup
    private lateinit var cardAssignmentInfo: MaterialCardView
    private lateinit var textAssignedUsers: TextView
    
    // üéØ Men√∫ flotante moderno
    private var fabMain: FloatingActionButton? = null
    private var menuEditBook: View? = null
    private var menuDeleteBook: View? = null
    private var overlayBackground: View? = null
    private var isMenuOpen = false
    
    // üìö Datos
    private lateinit var firestore: FirebaseFirestore
    private var currentBook: Book? = null
    private var bookId: String? = null

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        return inflater.inflate(R.layout.fragment_book_detail_admin, container, false)
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        // üîß Inicializar componentes
        initializeViews(view)
        
        // üî• Configurar funcionalidades
        setupToolbar()
        setupFABMenu()
        
        // üìö Cargar datos
        firestore = FirebaseFirestore.getInstance()
        bookId = arguments?.getString(ARG_BOOK_ID)
        
        if (bookId != null) {
            loadBookDetails(bookId!!)
        } else {
            Log.e(TAG, "‚ùå No se proporcion√≥ ID de libro")
            Toast.makeText(context, "Error: Libro no encontrado", Toast.LENGTH_SHORT).show()
            parentFragmentManager.popBackStack()
        }
        
        Log.d(TAG, "üé® Vista inicializada correctamente")
    }

    /**
     * üîß Inicializar todas las vistas
     */
    private fun initializeViews(view: View) {
        toolbar = view.findViewById(R.id.toolbar_detail)
        imgBookCover = view.findViewById(R.id.img_book_cover_large)
        textBookTitle = view.findViewById(R.id.text_book_title)
        textBookAuthor = view.findViewById(R.id.text_book_author)
        textBookStatus = view.findViewById(R.id.text_book_status)
        textBookQuantity = view.findViewById(R.id.text_book_quantity)
        textBookDescription = view.findViewById(R.id.text_book_description)
        textBookIsbn = view.findViewById(R.id.text_book_isbn)
        chipGroupCategories = view.findViewById(R.id.chip_group_categories)
        cardAssignmentInfo = view.findViewById(R.id.card_assignment_info)
        textAssignedUsers = view.findViewById(R.id.text_assigned_users)
        
        // üéØ Men√∫ flotante moderno
        Log.d(TAG, "üîç Buscando componentes del men√∫ flotante...")
        
        try {
            val floatingMenu = view.findViewById<View>(R.id.floating_action_menu)
            
            if (floatingMenu != null) {
                Log.d(TAG, "‚úÖ Floating menu container encontrado")
                
                fabMain = floatingMenu.findViewById(R.id.fab_main)
                menuEditBook = floatingMenu.findViewById(R.id.menu_edit_book)
                menuDeleteBook = floatingMenu.findViewById(R.id.menu_delete_book)
                overlayBackground = floatingMenu.findViewById(R.id.overlay_background)
                
                Log.d(TAG, "FAB: ${if (fabMain != null) "‚úÖ OK" else "‚ùå NULL"}")
                Log.d(TAG, "Edit: ${if (menuEditBook != null) "‚úÖ OK" else "‚ùå NULL"}")
                Log.d(TAG, "Delete: ${if (menuDeleteBook != null) "‚úÖ OK" else "‚ùå NULL"}")
                Log.d(TAG, "Overlay: ${if (overlayBackground != null) "‚úÖ OK" else "‚ùå NULL"}")
                
                if (fabMain != null && menuEditBook != null && menuDeleteBook != null && overlayBackground != null) {
                    Log.d(TAG, "‚úÖ Todos los componentes del men√∫ inicializados correctamente")
                    
                    // üéØ Configurar estado inicial de los elementos del men√∫
                    initializeMenuItemsState()
                } else {
                    Log.w(TAG, "‚ö†Ô∏è Algunos componentes del men√∫ no se pudieron inicializar")
                }
            } else {
                Log.e(TAG, "‚ùå ERROR: Floating menu container NO encontrado")
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå ERROR inicializando men√∫ flotante: ${e.message}")
        }
    }

    /**
     * üéØ Configurar estado inicial de elementos del men√∫
     */
    private fun initializeMenuItemsState() {
        Log.d(TAG, "üîß Configurando estado inicial del men√∫...")
        
        // Configurar estado inicial: invisible pero listo para animar
        listOfNotNull(menuEditBook, menuDeleteBook).forEach { item ->
            item.alpha = 0f
            item.scaleX = 0.7f
            item.scaleY = 0.7f
            item.translationY = 30f
        }
        
        Log.d(TAG, "‚úÖ Estado inicial del men√∫ configurado")
    }

    /**
     * üîô Configurar toolbar
     */
    private fun setupToolbar() {
        toolbar.setNavigationOnClickListener {
            parentFragmentManager.popBackStack()
        }
    }

    /**
     * üéØ Configurar men√∫ flotante moderno
     */
    private fun setupFABMenu() {
        Log.d(TAG, "üîß Configurando FAB menu...")
        
        // Verificar que todos los componentes est√©n inicializados
        if (fabMain == null || menuEditBook == null || menuDeleteBook == null || overlayBackground == null) {
            Log.w(TAG, "‚ö†Ô∏è No se puede configurar FAB menu - componentes no inicializados")
            return
        }
        
        // Click en FAB principal para mostrar/ocultar men√∫
        fabMain?.setOnClickListener {
            Log.d(TAG, "üî• FAB principal clickeado")
            toggleFloatingMenu()
        }
        
        // Click en overlay para cerrar men√∫
        overlayBackground?.setOnClickListener {
            Log.d(TAG, "üéØ Overlay clickeado - cerrando men√∫")
            closeFloatingMenu()
        }
        
        // Click en opci√≥n "Editar libro"
        menuEditBook?.setOnClickListener {
            Log.d(TAG, "‚úèÔ∏è Opci√≥n editar clickeada")
            closeFloatingMenu()
            editBook()
        }
        
        // Click en opci√≥n "Eliminar libro"
        menuDeleteBook?.setOnClickListener {
            Log.d(TAG, "üóëÔ∏è Opci√≥n eliminar clickeada")
            closeFloatingMenu()
            confirmDeleteBook()
        }
        
        Log.d(TAG, "‚úÖ FAB menu configurado correctamente")
    }

    /**
     * üìö Cargar detalles del libro
     */
    private fun loadBookDetails(bookId: String) {
        Log.i(TAG, "üìö Cargando detalles del libro: $bookId")
        
        firestore.collection("books")
            .document(bookId)
            .get()
            .addOnSuccessListener { document ->
                if (document.exists()) {
                    val book = document.toObject(Book::class.java)
                    if (book != null) {
                        book.id = document.id
                        currentBook = book
                        displayBookDetails(book)
                        Log.d(TAG, "‚úÖ Libro cargado: ${book.title}")
                    } else {
                        showError("Error al procesar datos del libro")
                    }
                } else {
                    showError("Libro no encontrado")
                }
            }
            .addOnFailureListener { exception ->
                Log.e(TAG, "‚ùå Error al cargar libro", exception)
                showError("Error al cargar libro: ${exception.message}")
            }
    }

    /**
     * üé® Mostrar detalles del libro en la UI
     */
    private fun displayBookDetails(book: Book) {
        // üìñ Informaci√≥n b√°sica
        textBookTitle.text = book.title
        textBookAuthor.text = "por ${book.author}"
        textBookDescription.text = book.description.ifEmpty { "Sin descripci√≥n disponible" }
        textBookIsbn.text = book.isbn.ifEmpty { "No especificado" }
        
        // üìä Estado y cantidad
        textBookStatus.text = book.status
        val availableCount = book.quantity - (book.assignedTo?.size ?: 0)
        textBookQuantity.text = "$availableCount de ${book.quantity} disponibles"
        
        // üé® Imagen de portada
        if (!book.imageUrl.isNullOrEmpty()) {
            Glide.with(this)
                .load(book.imageUrl)
                .placeholder(R.drawable.ic_book_library)
                .error(R.drawable.ic_book_library)
                .into(imgBookCover)
        }
        
        // üè∑Ô∏è Categor√≠as
        displayCategories(book.categories)
        
        // üë• Informaci√≥n de asignaci√≥n
        displayAssignmentInfo(book)
    }

    /**
     * üè∑Ô∏è Mostrar categor√≠as como chips
     */
    private fun displayCategories(categories: List<String>) {
        chipGroupCategories.removeAllViews()
        
        if (categories.isNotEmpty()) {
            categories.forEach { category ->
                val chip = Chip(requireContext())
                chip.text = category
                chip.isEnabled = false
                chipGroupCategories.addView(chip)
            }
        } else {
            val chip = Chip(requireContext())
            chip.text = "Sin categor√≠a"
            chip.isEnabled = false
            chipGroupCategories.addView(chip)
        }
    }

    /**
     * üë• Mostrar informaci√≥n de asignaci√≥n
     */
    private fun displayAssignmentInfo(book: Book) {
        if (!book.assignedWithNames.isNullOrEmpty()) {
            cardAssignmentInfo.visibility = View.VISIBLE
            textAssignedUsers.text = book.assignedWithNames!!.joinToString(", ")
        } else {
            cardAssignmentInfo.visibility = View.GONE
        }
    }

    /**
     * üéØ Alternar visibilidad del men√∫ flotante
     */
    private fun toggleFloatingMenu() {
        if (isMenuOpen) {
            closeFloatingMenu()
        } else {
            openFloatingMenu()
        }
    }
    
    /**
     * üì§ Abrir men√∫ flotante con animaci√≥n
     */
    private fun openFloatingMenu() {
        Log.d(TAG, "üîÑ Abriendo men√∫ flotante...")
        
        // Verificar que los componentes est√©n disponibles
        if (overlayBackground == null || fabMain == null) {
            Log.w(TAG, "‚ö†Ô∏è No se puede abrir men√∫ - componentes no disponibles")
            return
        }
        
        isMenuOpen = true
        
        // Mostrar overlay
        overlayBackground?.let { overlay ->
            overlay.visibility = View.VISIBLE
            overlay.alpha = 0f
            overlay.animate()
                .alpha(1f)
                .setDuration(200)
                .start()
        }
        
        // Rotar FAB principal (+ se convierte en X)
        fabMain?.animate()
            ?.rotation(45f)
            ?.setDuration(300)
            ?.setInterpolator(android.view.animation.OvershootInterpolator())
            ?.start()
        
        // Animar opciones del men√∫
        animateMenuItems(true)
        Log.d(TAG, "‚úÖ Men√∫ flotante abierto")
    }
    
    /**
     * üì• Cerrar men√∫ flotante con animaci√≥n
     */
    private fun closeFloatingMenu() {
        Log.d(TAG, "üîÑ Cerrando men√∫ flotante...")
        
        // Verificar que los componentes est√©n disponibles
        if (overlayBackground == null || fabMain == null) {
            Log.w(TAG, "‚ö†Ô∏è No se puede cerrar men√∫ - componentes no disponibles")
            return
        }
        
        isMenuOpen = false
        
        // Ocultar overlay
        overlayBackground?.animate()
            ?.alpha(0f)
            ?.setDuration(200)
            ?.setListener(object : AnimatorListenerAdapter() {
                override fun onAnimationEnd(animation: Animator) {
                    overlayBackground?.visibility = View.GONE
                }
            })
            ?.start()
        
        // Rotar FAB principal de vuelta (X se convierte en +)
        fabMain?.animate()
            ?.rotation(0f)
            ?.setDuration(300)
            ?.setInterpolator(android.view.animation.OvershootInterpolator())
            ?.start()
        
        // Animar opciones del men√∫
        animateMenuItems(false)
        Log.d(TAG, "‚úÖ Men√∫ flotante cerrado")
    }
    
    /**
     * üé¨ Animar elementos del men√∫ (versi√≥n simplificada)
     */
    private fun animateMenuItems(show: Boolean) {
        val items = listOfNotNull(menuEditBook, menuDeleteBook)
        
        if (items.isEmpty()) {
            Log.w(TAG, "‚ö†Ô∏è No hay elementos de men√∫ para animar")
            return
        }
        
        Log.d(TAG, "üé¨ Animando ${items.size} elementos del men√∫. Mostrar: $show")
        
        items.forEachIndexed { index, item ->
            Log.d(TAG, "üéØ Animando elemento $index - Estado actual: visibility=${item.visibility}, alpha=${item.alpha}")
            
            if (show) {
                // Mostrar elemento
                Log.d(TAG, "üì§ Mostrando elemento $index")
                
                // NO cambiar visibility aqu√≠ - los elementos ya est√°n VISIBLE en el layout
                item.animate()
                    .alpha(1f)
                    .scaleX(1f)
                    .scaleY(1f)
                    .translationY(0f)
                    .setStartDelay((index * 80).toLong())
                    .setDuration(350)
                    .setInterpolator(android.view.animation.OvershootInterpolator(1.2f))
                    .setListener(object : AnimatorListenerAdapter() {
                        override fun onAnimationStart(animation: Animator) {
                            Log.d(TAG, "üé¨ Iniciando animaci√≥n mostrar elemento $index")
                        }
                        override fun onAnimationEnd(animation: Animator) {
                            Log.d(TAG, "‚úÖ Elemento $index mostrado completamente")
                        }
                    })
                    .start()
            } else {
                // Ocultar elemento
                Log.d(TAG, "üì• Ocultando elemento $index")
                
                item.animate()
                    .alpha(0f)
                    .scaleX(0.7f)
                    .scaleY(0.7f)
                    .translationY(30f)
                    .setStartDelay((index * 50).toLong())
                    .setDuration(250)
                    .setInterpolator(android.view.animation.AccelerateInterpolator())
                    .setListener(object : AnimatorListenerAdapter() {
                        override fun onAnimationStart(animation: Animator) {
                            Log.d(TAG, "üé¨ Iniciando animaci√≥n ocultar elemento $index")
                        }
                        override fun onAnimationEnd(animation: Animator) {
                            Log.d(TAG, "‚úÖ Elemento $index ocultado completamente")
                        }
                    })
                    .start()
            }
        }
    }

    /**
     * ‚úèÔ∏è Navegar a edici√≥n de libro
     */
    private fun editBook() {
        currentBook?.let { book ->
            Log.d(TAG, "‚úèÔ∏è Navegando a edici√≥n: ${book.title}")
            
            val editFragment = EditBookFragment.newInstance(book)
            parentFragmentManager.beginTransaction()
                .replace(R.id.admin_fragment_container, editFragment)
                .addToBackStack(null)
                .commit()
        }
    }

    /**
     * üóëÔ∏è Confirmar eliminaci√≥n de libro
     */
    private fun confirmDeleteBook() {
        currentBook?.let { book ->
            MaterialAlertDialogBuilder(requireContext())
                .setTitle("Eliminar libro")
                .setMessage("¬øEst√°s seguro de que deseas eliminar \"${book.title}\"?\n\nEsta acci√≥n no se puede deshacer.")
                .setPositiveButton("Eliminar") { _, _ ->
                    deleteBook(book)
                }
                .setNegativeButton("Cancelar", null)
                .setIcon(R.drawable.ic_delete_warning)
                .show()
        }
    }

    /**
     * üóëÔ∏è Eliminar libro de Firebase
     */
    private fun deleteBook(book: Book) {
        Log.i(TAG, "üóëÔ∏è Eliminando libro: ${book.title}")
        
        firestore.collection("books")
            .document(book.id)
            .delete()
            .addOnSuccessListener {
                Log.d(TAG, "‚úÖ Libro eliminado exitosamente")
                Toast.makeText(context, "Libro eliminado correctamente", Toast.LENGTH_SHORT).show()
                
                // Regresar a la lista
                parentFragmentManager.popBackStack()
            }
            .addOnFailureListener { exception ->
                Log.e(TAG, "‚ùå Error al eliminar libro", exception)
                Toast.makeText(
                    context,
                    "Error al eliminar libro: ${exception.message}",
                    Toast.LENGTH_LONG
                ).show()
            }
    }

    /**
     * ‚ùå Mostrar error al usuario
     */
    private fun showError(message: String) {
        Toast.makeText(context, message, Toast.LENGTH_LONG).show()
        Log.e(TAG, "‚ùå Error: $message")
    }
}
